# -*- coding: utf-8 -*-
"""House_price_prediction_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1loQPMK7Ep1I7NMHFPE5OLLhdZ39K6mkR
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler  # For feature scaling
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error

from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

# Authenticate and create a PyDrive client.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

# Mount Google Drive correctly
from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

# Correct file path after mounting Google Drive
file_path = '/content/drive/MyDrive/house_prices3.csv'

# Read CSV file
data = pd.read_csv(file_path)

# Display data information
print(data.head())
print(data.info())
print(data.describe())

# Define features (X) and target (y)
X = data[["House Size (sq ft)", "Number of Bedrooms", "Location (1-5)", "Age (years)"]]
y = data["Price ($)"]
print("X\n",X[:3])
# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
print("X_train\n",X_train[:3])
print("X_train_scaled\n",X_train_scaled[:3])

# Create a Linear Regression model
model = LinearRegression()
# Train the model on the training data
model.fit(X_train_scaled, y_train)

# Print the coefficients of the linear regression equation
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

# Make predictions on the test data
y_pred = model.predict(X_test_scaled)
print(y_pred)

#Convert y_test and y_pred to Pandas Series for easier indexing & prevent "iloc" run error
y_test_series = pd.Series(y_test)
y_pred_series = pd.Series(y_pred)

# Calculate MAPE
def mean_absolute_percentage_error(y_true, y_pred):
    y_true, y_pred = np.array(y_true), np.array(y_pred)
    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100

mape = mean_absolute_percentage_error(y_test_series, y_pred_series)
print(f"Mean Absolute Percentage Error: {mape:.2f}%")

# Get user input each feature value for predict house price
House_size = float(input("Enter House_size (sq ft): "))
Number_of_Bedrooms = float(input("Enter Number of Bedrooms: "))
Location = float(input("Enter Location (1-5): "))
Age = float(input("Enter Age of House (years): "))

# Predict the y-value from new data.
#new_data = [[House_size, Number_of_Bedrooms, Location, Age]]  # new data
new_data = [House_size, Number_of_Bedrooms, Location, Age]  # new data
new_data_scaled = scaler.transform([new_data])
y_pred_new = model.predict(new_data_scaled)
print("Predicted price:", y_pred_new)